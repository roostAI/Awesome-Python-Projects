# Test generated by RoostGPT for test awesome-python-ceaser-cipher using AI Type Open AI and AI Model gpt-4

import unittest

def isSpecialChar(character):
    specChar = "!@#$%^&*()_-+={}[]|:;'<>?,./"
    if character in specChar:
        return True
    else:
        return False

def isCharacter(character):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    if character.lower() in alphabet:
        return True
    else:
        return False

def isNumber(character):
    numbers = "0123456789"
    if character in numbers:
        return True
    else:
        return False

def encrypt(message, encryptNum):
    encryptedMessage = "";
   
    for mElement in message:
        if(mElement == " "):
            encryptedMessage = encryptedMessage + " "
        elif(mElement == "."):
            encryptedMessage = encryptedMessage + "."
        elif(isSpecialChar(mElement)):
            for aCharacter in specChar:
                if(mElement == specChar[aCharacter]):
                    eChar = (aCharacter + encryptNum)%24
                    encryptedMessage = encryptedMessage + specChar[eChar]
        elif(isCharacter(mElement)):
            for aLetter in alphabet:
                if(mElement.lower() == alphabet[aLetter]):
                    eLetter = (aLetter + encryptNum)%26
                    encryptedMessage = encryptedMessage + alphabet[eLetter]
        elif(isNumber(mElement)):
            eNumber = (int(mElement) + encryptNum)%10
            encryptedMessage = encryptedMessage + str(eNumber)
        else:
            encryptedMessage = encryptedMessage + mElement

    print("\n%s  \nDecryption Number: %d\n" %(encryptedMessage, encryptNum))
    return encryptedMessage

class TestEncryptMethods(unittest.TestCase):

    def TestEncrypt_71580cd1e0(self):
        self.assertEqual(encrypt("abc", 1), "bcd")
        self.assertEqual(encrypt("123", 1), "234")
        self.assertEqual(encrypt("abc 123", 1), "bcd 234")
        self.assertEqual(encrypt("abc.123", 1), "bcd.234")
        self.assertEqual(encrypt("abc 123.", 1), "bcd 234.")
        self.assertEqual(encrypt("abc.123.", 1), "bcd.234.")
        self.assertEqual(encrypt("abc 123.", 2), "cde 345.")
        self.assertEqual(encrypt("abc.123.", 2), "cde.345.")
        self.assertEqual(encrypt("abc 123.", 10), "klm 345.")
        self.assertEqual(encrypt("abc.123.", 10), "klm.345.")
        self.assertEqual(encrypt("abc 123.", 26), "abc 123.")
        self.assertEqual(encrypt("abc.123.", 26), "abc.123.")

if __name__ == '__main__':
    unittest.main()
